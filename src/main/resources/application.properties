# Configura\u00E7\u00F5es da Aplica\u00E7\u00E3o SojogaBR

# Nomes das tabelas do DynamoDB
# Os nomes das tabelas ser\u00E3o injetados via vari\u00E1veis de ambiente.
# O valor ap\u00F3s o ':' \u00E9 um padr\u00E3o para desenvolvimento local.
aws.dynamodb.user-tableName=${DYNAMODB_USER_TABLE_NAME:Usuario}
aws.dynamodb.campeonato-tableName=${DYNAMODB_CAMPEONATO_TABLE_NAME:SojogaBrTable}

# O perfil ativo ser\u00E1 definido pela vari\u00E1vel de ambiente SPRING_PROFILES_ACTIVE.
# Se n\u00E3o for definida, 'dev' ser\u00E1 o padr\u00E3o.
spring.profiles.active=${SPRING_PROFILES_ACTIVE:dev}

# Configura\u00E7\u00E3o do JWT (JSON Web Token)
# O segredo do JWT NUNCA deve ser fixo no c\u00F3digo. Ele ser\u00E1 injetado via vari\u00E1vel de ambiente.
# Adicionamos um valor padr\u00E3o inseguro para facilitar testes e desenvolvimento local.
jwt.secret=${JWT_SECRET:uma-chave-secreta-padrao-para-testes-locais-e-ci}
jwt.expiration=86400000

# Configura\u00E7\u00E3o do Spring Boot Actuator
# Exp\u00F5e o endpoint de sa\u00FAde ('/actuator/health') para que o Docker possa verificar o status da aplica\u00E7\u00E3o.
management.endpoints.web.exposure.include=health

# Voc\u00EA pode adicionar outras configura\u00E7\u00F5es aqui, como as credenciais da AWS, regi\u00E3o, etc.
# Exemplo:
# spring.cloud.aws.credentials.access-key=SUA_ACCESS_KEY
# spring.cloud.aws.credentials.secret-key=SUA_SECRET_KEY
# spring.cloud.aws.region.static=us-east-1


# Configura\u00E7\u00E3o de CORS
# Permite m\u00FAltiplas origens, separadas por v\u00EDrgula
cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080}